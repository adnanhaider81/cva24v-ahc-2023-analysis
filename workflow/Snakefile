# Snakemake pipeline for CV-A24v AHC 2023 analysis
# Requires NCBI_EMAIL env var for Entrez fetch steps

import yaml, os
cfg = yaml.safe_load(open("config/config.yaml"))

SAMPLES = [x.get("sample","AHC_001") for x in cfg.get("pairs", [{"sample":"AHC_001","r1":"data-private/AHC_001_R1.fastq.gz","r2":"data-private/AHC_001_R2.fastq.gz"}])]
META = {x.get("sample","AHC_001"): x for x in cfg.get("pairs", [])}
if not META:
    META = {"AHC_001": {"r1":"data-private/AHC_001_R1.fastq.gz","r2":"data-private/AHC_001_R2.fastq.gz"}}
THREADS = cfg["params"]["threads"]

rule all:
    input:
        expand("results/consensus/{s}.fa", s=SAMPLES),
        "results/consensus/all_consensus.fasta",
        "results/aln/wg_alignment.fasta",
        "results/aln/vp1_alignment.fasta",
        "results/iqtree/wg.treefile",
        "results/iqtree/vp1.treefile"

rule trim:
    input:
        r1=lambda w: META[w.s]["r1"],
        r2=lambda w: META[w.s]["r2"]
    output:
        r1="work/{s}.R1.trim.fastq.gz",
        r2="work/{s}.R2.trim.fastq.gz"
    params:
        adapters=cfg["params"]["trim_adapters"]
    threads: THREADS
    shell:
        "trimmomatic PE -threads {threads} {input.r1} {input.r2} "
        "{output.r1} /dev/null {output.r2} /dev/null "
        "ILLUMINACLIP:{params.adapters}:2:30:10 SLIDINGWINDOW:4:20 MINLEN:50"

rule assemble_spades:
    input:
        r1="work/{s}.R1.trim.fastq.gz",
        r2="work/{s}.R2.trim.fastq.gz"
    output:
        contigs="results/spades/{s}/contigs.fasta"
    threads: THREADS
    shell:
        "spades.py -1 {input.r1} -2 {input.r2} -o results/spades/{wildcards.s}"

rule contig_qc:
    input:
        contigs="results/spades/{s}/contigs.fasta"
    output:
        tsv="results/spades/{s}/contigs.qc.tsv"
    shell:
        "python analysis/scripts/contig_qc.py --in {input.contigs} --out_tsv {output.tsv}"

rule fetch_refs:
    output:
        "results/refs/context.fasta"
    shell:
        "printf '%s\n' " + " ".join(cfg["context_accessions"]) + " | tr ' ' '\\n' > config/context.txt && "
        "python analysis/scripts/fetch_genbank.py --acc config/context.txt --out_fasta {output}"

rule map_bwa:
    input:
        r1="work/{s}.R1.trim.fastq.gz",
        r2="work/{s}.R2.trim.fastq.gz"
    output:
        bam="work/{s}.sorted.bam"
    params:
        ref=lambda w: cfg["ref_accessions"]["recent_2023"]
    threads: THREADS
    shell:
        "printf '%s\n' {params.ref} > refs/mref.txt && "
        "python analysis/scripts/fetch_genbank.py --acc refs/mref.txt --out_fasta refs/mref.fasta && "
        "bwa index refs/mref.fasta && "
        "bwa mem -t {threads} refs/mref.fasta {input.r1} {input.r2} | samtools sort -@ {threads} -o {output.bam} && "
        "picard MarkDuplicates I={output.bam} O=work/{wildcards.s}.dedup.bam M=work/{wildcards.s}.dupmetrics.txt VALIDATION_STRINGENCY=SILENT REMOVE_SEQUENCING_DUPLICATES=false && "
        "samtools index work/{wildcards.s}.dedup.bam"

rule depth_mask_call_consensus:
    input:
        bam="work/{s}.dedup.bam"
    output:
        depth="work/{s}.depth.txt",
        mask="work/{s}.mask.bed",
        vcf="work/{s}.variants.vcf.gz",
        cons="results/consensus/{s}.fa"
    params:
        min_dp=cfg["params"]["min_depth_consensus"]
    threads: THREADS
    shell:
        "samtools depth -a {input.bam} > {output.depth} && "
        "awk -v OFS='\\t' -v MIN={params.min_dp} '{ if ($3<MIN) print $1, $2-1, $2 }' {output.depth} > {output.mask} && "
        "bcftools mpileup -Ou -f refs/mref.fasta {input.bam} | bcftools call -mv -Oz -o {output.vcf} && bcftools index {output.vcf} && "
        "bcftools consensus -f refs/mref.fasta -m {output.mask} {output.vcf} > {output.cons}"

rule combine_consensus:
    input:
        expand("results/consensus/{s}.fa", s=SAMPLES)
    output:
        "results/consensus/all_consensus.fasta"
    shell:
        "cat {input} > {output}"

rule align_wg:
    input:
        cons="results/consensus/all_consensus.fasta",
        ctx="results/refs/context.fasta"
    output:
        "results/aln/wg_alignment.fasta"
    shell:
        "mkdir -p results/aln && "
        "cat {input.cons} {input.ctx} > results/aln/wg_input.fasta && "
        "mafft --auto results/aln/wg_input.fasta > {output}"

rule vp1_extract:
    input:
        cons="results/consensus/all_consensus.fasta"
    output:
        "results/aln/vp1_input.fasta"
    shell:
        "python analysis/scripts/extract_vp1.py --ref_acc D90457.1 --genomes {input.cons} --out_fasta {output}"

rule align_vp1:
    input:
        "results/aln/vp1_input.fasta"
    output:
        "results/aln/vp1_alignment.fasta"
    shell:
        "mafft --auto {input} > {output}"

rule iqtree_wg:
    input:
        aln="results/aln/wg_alignment.fasta"
    output:
        tree="results/iqtree/wg.treefile"
    params:
        model=cfg["params"]["iqtree_model_wg"],
        bb=cfg["params"]["bootstrap"]
    threads: 2
    shell:
        "mkdir -p results/iqtree && "
        "iqtree -s {input.aln} -m {params.model} -bb {params.bb} -nt {threads} -pre results/iqtree/wg"

rule iqtree_vp1:
    input:
        aln="results/aln/vp1_alignment.fasta"
    output:
        tree="results/iqtree/vp1.treefile"
    params:
        model=cfg["params"]["iqtree_model_vp1"],
        bb=cfg["params"]["bootstrap"]
    threads: 2
    shell:
        "mkdir -p results/iqtree && "
        "iqtree -s {input.aln} -m {params.model} -bb {params.bb} -nt {threads} -pre results/iqtree/vp1"
